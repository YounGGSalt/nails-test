import telebot
import config
import json
import socket
from telebot import types
from urllib.request import Request, urlopen
from pathlib import Path
from typing import Any, Dict

app           =  socket.socket(socket.AF_INET, socket.SOCK_STREAM)
bot           =  telebot.TeleBot(config.TOKEN)
serverJSON    =  './data/server.json'
serverData    =  json.loads(Path('./data/server.json').read_text())
telegramJSON  =  './data/telegram.json'
telegramData  =  json.loads(Path('./data/telegram.json').read_text())

def readJSON(toRead):
  with open(toRead, "r",) as json_file:
    data = json.load(json_file)
    
  return data
def writeJSON(toRead, toDumb):
  with open(toRead, "w",) as json_file:
    json.dump(toDumb, json_file)

PORT                  =  app.bind(('', 0))
serverData['python']  =  app.getsockname()[1]
server                =  'http://127.0.0.1:' + str(readJSON(serverJSON)['node'])
writeJSON(serverJSON, serverData)

def getData():
  ...
async def postData(task_data: str, body_data: Dict[str, Any]) -> Dict[str, Any]:
    body = json.dumps(body_data)
    response = await fetch(f"{server}/{task_data}", {
        "method": "POST",
        "mode": "cors",
        "cache": "no-cache",
        "credentials": "same-origin",
        "headers": {
            "Content-Type": "application/json"
        },
        "redirect": "follow",
        "referrer": "no-referrer",
        "body": body
    })
    return await response.json()
def sendText(message, markup, text):
  if markup == 0:
    bot.send_message(message.chat.id, text, parse_mode = 'Markdown')
  else:
    bot.send_message(message.chat.id, text, reply_markup = markup, parse_mode = 'Markdown')
def sendPhoto(message, img, markup, text):
  if markup != 0 and text == 0:
    bot.send_photo(message.chat.id, photo = open(img, 'rb'), reply_markup = markup)
  elif markup == 0 and text != 0:
    bot.send_photo(message.chat.id, photo = open(img, 'rb'), caption = text, parse_mode = 'Markdown')
  elif markup != 0 and text != 0:
    bot.send_photo(message.chat.id, photo = open(img, 'rb'), reply_markup = markup, caption = text, parse_mode = 'Markdown')
  elif markup == 0 and text == 0:
    bot.send_photo(message.chat.id, photo = open(img, 'rb'))
def sendAudio(message, audio):
  bot.send_audio(message.chat.id, audio)
def sendDoc(message, document):
  bot.senddocument(message.chat.id, document)
def sendVideo(message, video):
  bot.send_video(message.chat.id, video)
def sendLocation(message, latitude, longitude):
  bot.sendlocation(message.chat.id, latitude, longitude)
def replyTo(message, markup, text):
  if markup == 0:
    bot.reply_to(message.chat.id, text, parse_mode = 'Markdown')
  else:
    bot.reply_to(message.chat.id, text, reply_markup = markup, parse_mode = 'Markdown')
def editMessage(message, markup, message_id, text):
  if markup == 0:
    bot.edit_message_text(message.chat.id, text, parse_mode = 'Markdown')
  else:
    bot.edit_message_text(message.chat.id, message_id, text, reply_markup = markup, parse_mode = 'Markdown')
def deleteMessage(message, message_id):
  bot.send_video(message.chat.id, message_id)
def getID(message):
  userID = message.from_user.id

  return str(userID)
def getUName(message):
  userName = message.from_user.first_name

  return str(userName)
def getFName(message):
  FirstName = message.from_user.first_name

  return str(FirstName)
def getLName(message):
  LastName = message.from_user.last_name

  return str(LastName)

@bot.message_handler(commands = ['start'])
def start(message):
  keyboard = types.InlineKeyboardMarkup()
  keyboard.add(
    types.InlineKeyboardButton('–°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î', callback_data = 'list')
  )
  sendText(message, keyboard, '–ü—Ä–∏–≤–µ—Ç, *' + getFName(message) + '* üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª *' + bot.get_me().first_name + '*!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–∞–º –Ω–∞ –ø—Ä–∏—ë–º –ø—Ä—è–º–∏–∫–æ–º –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞.\n\n–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: https://www.google.ru/?hl=ru')
  bot.set_my_commands(
    commands = [
      types.BotCommand('/start', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'),
      types.BotCommand('/info', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
      types.BotCommand('/list', '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'),
      types.BotCommand('/reg', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
      types.BotCommand('/masters', '–ú–∞—Å—Ç–µ—Ä—ã'),
      types.BotCommand('/services', '–£—Å–ª—É–≥–∏')
    ],
    scope = telebot.types.BotCommandScopeChat(message.chat.id)
  )

@bot.message_handler(commands = ['info'])
def info(message):
  sendText(message, 0, '–ò–ù–§–û–†–ú–ê–¶–ò–Ø\n')

@bot.message_handler(commands = ['list'])
def list(message):
  keyboard = types.InlineKeyboardMarkup()
  keyboard.add(
    types.InlineKeyboardButton('–ü–†–ò–í–ï–¢–°–¢–í–ò–ï', callback_data = 'start'),
    types.InlineKeyboardButton('–ò–ù–§–û–†–ú–ê–¶–ò–Ø', callback_data = 'info'),
    types.InlineKeyboardButton('–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø', callback_data = 'reg'),
    types.InlineKeyboardButton('–ú–ê–°–¢–ï–†–´', callback_data = 'masters'),
    types.InlineKeyboardButton('–£–°–õ–£–ì–ò', callback_data = 'services')
  )
  sendText(message, keyboard, '*–°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î*\n/help | –ò–Ω—Ñ–æ–º–∞—Ü–∏—è\n/list | –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/reg | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n/masters | –ú–∞—Å—Ç–µ—Ä–æ–≤\n/services | –£—Å–ª—É–≥–∏')

@bot.message_handler(commands = ['reg'])
def reg(message):
  sendText(message, 0, '–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø')
  

@bot.message_handler(commands = ['masters'])
def masters(message):
  keyboard = types.InlineKeyboardMarkup()
  keyboard.add(
    types.InlineKeyboardButton('–ó–ê–ü–ò–°–ê–¢–¨–°–Ø', callback_data = 'start')
  )
  sendPhoto(message, r'./bot/src/img/MZ.jpg', keyboard, '*–ú–∞—Ä–∏–Ω–∞ –Æ—Ä—å–µ–≤–Ω–∞*\n–ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã | 3 –≥–æ–¥–∞\nWhatsApp | https://www.google.ru/?hl=ru\nTelegram | https://www.google.ru/?hl=ru\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ | https://www.google.ru/?hl=ru\n\n')

@bot.message_handler(commands = ['services'])
def services(message):
  sendText(message, 0, '–£–°–õ–£–ì–ò\n')

# @bot.message_handler(content_types = ['text'])
# 

# @bot.message_handler(content_types = ['photo'])
# 

@bot.callback_query_handler(func = lambda call: True)
def callback(call):
  if call.message:
    if call.data == 'start':
      start(call.message)
    elif call.data == 'info':
      info(call.message)
    elif call.data == 'list':
      list(call.message)
    elif call.data == 'reg':
      reg(call.message)
    elif call.data == 'masters':
      masters(call.message)
    elif call.data == 'services':
      services(call.message)

bot.polling(none_stop = True)